# trigger on main push
trigger:
  branches:
    include:
    - main

pr:
  branches:
    include:
    - '*'

pool:
  vmImage: ubuntu-18.04

variables:
  targetSolution: Fakebook.Profile

stages:
- stage: analyze
  variables:
    buildConfiguration: Release
  jobs:
  - job: build
    steps:
    # use .net core 2 for sonar compatibility
    - task: UseDotNet@2
      displayName: dotnet sdk 2
      inputs:
        packageType: 'sdk'
        version: '2.x'

    - task: SonarCloudPrepare@1
      displayName: sonar prepare analysis
      inputs:
        SonarCloud: 'SonarCloud Token'
        organization: '2011-fakebook-project3'
        scannerMode: 'MSBuild'
        projectKey: '2011-fakebook-project3_profile'
        projectName: 'profile'
        projectVersion: '0.2'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

    # switch to .net 5
    - task: UseDotNet@2
      displayName: dotnet sdk 5
      inputs:
        packageType: 'sdk'
        version: '5.x'

    - script: dotnet build --configuration $(buildConfiguration)
      displayName: dotnet build
      workingDirectory: $(targetSolution)

    # if previous steps successful, exactly one of these two steps should run:
    # test on main or PRs to main
    - task: DotNetCoreCLI@2
      displayName: dotnet test (failures disallowed)
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'main')))
      inputs:
        command: 'test'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
        publishTestResults: true
        workingDirectory: '$(targetSolution)'

    # test outside of main or PRs to main
    # (identical except: fails allowed for TDD workflow)
    - task: DotNetCoreCLI@2
      displayName: dotnet test (failures allowed)
      condition: and(succeeded(), not(or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'main'))))
      continueOnError: true
      inputs:
        command: 'test'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
        publishTestResults: true
        workingDirectory: '$(targetSolution)'

    - task: SonarCloudAnalyze@1
      displayName: sonar run analysis
      condition: always()

    - task: SonarCloudPublish@1
      displayName: sonar analysis publish
      condition: always()
      inputs:
        pollingTimeoutSec: '300'

- stage: docker
  variables:
    imageName: fakebookprofile
  jobs:
  - job: build
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
    - task: Docker@2
      displayName: docker build app image
      inputs:
        repository: '$(imageName)'
        command: 'build'
        Dockerfile: '$(targetSolution)/app.dockerfile'
    - task: Docker@2
      displayName: docker build db image
      inputs:
        repository: '$(imageName)-db'
        command: 'build'
        Dockerfile: '$(targetSolution)/db.dockerfile'
  - job: build_push
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
    - publish: .kubernetes
      displayName: publish artifact k8s
      artifact: k8s
    - task: Docker@2
      displayName: docker build-push app image
      inputs:
        containerRegistry: 'fakebook-acr'
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '$(targetSolution)/app.dockerfile'
        tags: |
          latest
          $(Build.BuildNumber)
    - task: Docker@2
      displayName: docker build-push db image
      inputs:
        containerRegistry: 'fakebook-acr'
        repository: '$(imageName)-db'
        command: 'buildAndPush'
        Dockerfile: '$(targetSolution)/db.dockerfile'
        tags: |
          latest
          $(Build.BuildNumber)

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: production
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: kubectl apply
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'production-fakebook-default-1610381990554'
              namespace: 'default'
              manifests: '$(Pipeline.Workspace)/k8s/**/*'

          - task: Kubernetes@1
            displayName: kubectl rollout restart
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'production-fakebook-default-1610381990554'
              namespace: 'default'
              command: 'rollout'
              useConfigurationFile: true
              configuration: '$(Pipeline.Workspace)/k8s/kubernetes_deployments.yaml'
              arguments: 'restart'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
